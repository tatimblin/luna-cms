/*
 * Functions
 *
 * This file collects all of the functions used throughout the website.
 *
 *****************************************************************************/


/*
 * Native `url(..)` function wrapper
 *
 * @param {String} $base - base URL for the asset
 * @param {String} $type - asset type folder (e.g. `fonts/`)
 * @param {String} $path - asset path
 * @return {Url}
 *
 *********************************************************/

@function asset($base, $type, $path) {
    @return url($base + $type + $path);
}


/*
 * Returns URL to an image based on its path
 *
 * @param {String} $path - image path
 * @param {String} $base [$base-url] - base URL
 * @return {Url}
 * @require $base-url
 *
 *********************************************************/

@function image($path, $base: $base-url) {
    @return asset($base, 'images/', $path);
}


/*
 * Returns URL to a font based on its path
 *
 * @param {String} $path - font path
 * @param {String} $base [$base-url] - base URL
 * @return {Url}
 * @require $base-url
 *
 *********************************************************/

@function font($path, $base: $base-url) {
    @return asset($base, 'webfonts/', $path);
}


/*
 * Returns Z-index depth
 *
 *********************************************************/

@function z($name) {
    @if map-has-key($z-layers, $name) {
        @return map-get($z-layers, $name);
    }
    @warn "Unknown '#{$name}' in $z-layers.";
    @return null;
}


/*
 * Returns font size
 *
 *********************************************************/

@function type-scale($key) {
    @if map-has-key($type-scale, $key) {
        @return map-get($type-scale, $key);
    }
    @warn "Unknown '#{$key}' in $type-scale.";
    @return null;
}
